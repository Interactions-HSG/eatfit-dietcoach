# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-01 15:24
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('category_color', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.ImageField(blank=True, null=True, upload_to=b'')),
                ('unit', models.CharField(max_length=255)),
                ('salt', models.FloatField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Category')),
            ],
            options={
                'db_table': 'food_item',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FoodRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daytime', models.CharField(choices=[(b'Breakfast', b'Breakfast'), (b'Brunch', b'Brunch'), (b'Lunch', b'Lunch'), (b'Snack', b'Snack'), (b'Supper', b'Supper')], max_length=25)),
                ('numberOfPortions', models.IntegerField()),
                ('total_salt', models.FloatField()),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.FoodItem')),
            ],
            options={
                'db_table': 'food_record',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProfileData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('profile_data_type', models.CharField(choices=[(b'House_Hold_Data', b'House_Hold_Data'), (b'Eating_Habits_Data', b'Eating_Habits_Data'), (b'Shopping_Habits_Data', b'Shopping_Habits_Data')], max_length=255)),
            ],
            options={
                'db_table': 'profile_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SaltTrackerUser',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=b'')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=80, null=True)),
                ('zip', models.CharField(blank=True, max_length=15, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[(b'Male', b'Male'), (b'Female', b'Female'), (b'Transgender', b'Transgender')], max_length=15, null=True)),
                ('notification_id', models.CharField(blank=True, max_length=100, null=True)),
                ('operating_system', models.CharField(blank=True, choices=[(b'iOS', b'iOS'), (b'Android', b'Android'), (b'Win10', b'Win10')], max_length=20, null=True)),
                ('cumulus_email', models.EmailField(max_length=254)),
                ('cumulus_password', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'salt_tracker_user',
                'managed': True,
            },
        ),
    ]
